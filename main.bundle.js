"use strict";(self.webpackChunktaskapp=self.webpackChunktaskapp||[]).push([[792],{208:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,'html,\nbody {\n  height: 100%;\n  width: 100%;\n}\n\n/* * {border: 1px solid red} */\n\n#header {\n  text-align: center;\n  line-height: 15vh;\n  height: 15vh;\n  font-size: 25px;\n  font-weight: bold;\n  background-color: lightgrey;\n}\n\n#main {\n  width: 100vw;\n  height: 85vh;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  background-color: lightgrey;\n}\n\n#mainview {\n  width: 45%;\n  /* background-color: aliceblue; */\n  background-color: #f9f9f9;\n  border-radius: 5px;\n  height: 80vh;\n  overflow-y: auto;\n}\n\n#sidebar {\n  width: 20%;\n  border-radius: 5px;\n  margin: 10px;\n  /* background-color: aliceblue; */\n  background-color: #f9f9f9;\n  height: 60vh;\n}\n\n#current {\n  width: 20%;\n  border-radius: 5px;\n  margin: 10px;\n  /* background-color: aliceblue; */\n  background-color: #f9f9f9;\n  height: 80vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.task {\n  display: flex;\n  align-items: stretch;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  margin: 10px;\n  opacity: 0;\n  transition: opacity 0.8s ease-in-out;\n  border: 1px solid grey;\n  padding: 10px;\n}\n\n.priority {\n  width: 15px;\n  background-color: #ccc;\n}\n\n.priority-completed {\n  background-color: #979897a1;\n}\n\n.priority3 {\n  background-color: #f44336;\n}\n\n.priority2 {\n  background-color: #ff9800;\n}\n\n.priority1 {\n  background-color: #2196f3;\n}\n\n.task-content {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  padding: 10px;\n}\n\n.task-info {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.name {\n  font-weight: bold;\n}\n\n.due-date {\n  font-size: 0.9em;\n  color: #666;\n}\n\n.action-buttons {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.complete-task,\n.delete-task,\n.edit-task {\n  width: 30px;\n  height: 30px;\n  margin-left: 5px;\n  border: none;\n  color: #ffffffcf;\n  font-size: 1.2em;\n  cursor: pointer;\n}\n\n.complete-task {\n  background-color: #71c28b;\n}\n\n.delete-task {\n  background-color: #cf6a62fd;\n}\n\n.edit-task {\n  background-color: #9693bafd;\n}\n\n.task.fade-in {\n  opacity: 1;\n}\n\n.task.fade-out {\n  opacity: 0;\n}\n\n.notes {\n  min-height: 40px;\n  max-height: 60px;\n  overflow-y: auto;\n}\n\n#addtask {\n  aspect-ratio: 1;\n  position: fixed;\n  bottom: 20px;\n  left: 50%;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 50%;\n  font-size: 16px;\n  cursor: pointer;\n  z-index: 9999;\n}\n\n#formContainer {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #f9f9f9;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  z-index: 9999;\n  max-width: 400px;\n  width: 100%;\n}\n\n#formContainer.hidden {\n  display: none;\n}\n\n#taskForm {\n  display: flex;\n  flex-direction: column;\n}\n\n.form-row {\n  display: flex;\n  justify-content: space-between;\n}\n\n.form-group {\n  margin-bottom: 12px;\n}\n\n.form-row .form-group {\n  width: 48%;\n}\n\nlabel {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 4px;\n  font-size: 0.9rem;\n}\n\ninput[type="text"],\ninput[type="date"],\nselect,\ntextarea {\n  width: 100%;\n  padding: 6px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 0.9rem;\n}\n\nselect[multiple] {\n  height: 80px;\n}\n\ntextarea {\n  resize: vertical;\n  min-height: 60px;\n}\n\n.form-actions {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 12px;\n}\n\n#saveButton,\n#cancelButton {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n#saveButton {\n  background-color: #71c28b;\n  color: #fff;\n  margin-right: 8px;\n}\n\n#cancelButton {\n  background-color: #cf6a62fd;\n  color: #fff;\n}\n\n#saveButton:hover {\n  background-color: #45a049;\n}\n\n#cancelButton:hover {\n  background-color: #d32f2f;\n}\n\n#taskGroups {\n  height: 100px;\n  overflow-y: scroll;\n}\n\n.taskgroup {\n  margin: 5px;\n}\n\n.taskgroup.selected {\n  background-color: #a3a0a076;\n}\n\n.taskgroup:hover {\n  background-color: #e0e0e0;\n}\n\n#addtaskgroup {\n  aspect-ratio: 1;\n  position: fixed;\n  bottom: 20px;\n  left: 11.5%;\n  padding: 10px 20px;\n  background-color: #13ac43;\n  color: #fff;\n  border: none;\n  border-radius: 50%;\n  font-size: 16px;\n  cursor: pointer;\n  z-index: 9999;\n}\n\n#taskGroupFormContainer {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  z-index: 9999;\n}\n\n#taskGroupFormContainer.hidden {\n  display: none;\n}\n\n.context-menu {\n  display: none;\n  position: absolute;\n  background-color: #f9f9f9;\n  border: 1px solid #ccc;\n  padding: 5px;\n  z-index: 9999;\n}\n\n.context-menu-item {\n  cursor: pointer;\n  padding: 5px;\n}\n\n.context-menu-item:hover {\n  background-color: #e0e0e0;\n}\n\n.taskdetails {\n  opacity: 1;\n  transition: opacity 0.5s ease-in-out;\n  width: 90%;\n  height: 90%;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.taskdetails.fade-out {\n  opacity: 0;\n}\n\n.taskdetails .priority {\n  width: 100%;\n  height: 20px;\n  margin-bottom: 20px;\n  border-radius: 4px;\n}\n\n.taskdetails .name {\n  font-size: 1.8em;\n  font-weight: bold;\n  margin-bottom: 15px;\n}\n\n.taskdetails .due-date {\n  font-size: 1.2em;\n  color: #666;\n  margin-bottom: 15px;\n}\n\n.taskdetails .notes {\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n}\n\n.taskdetails .action-buttons {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.taskdetails .action-buttons button {\n  width: 45px;\n  height: 45px;\n  margin-left: 7.5px;\n  border: none;\n  font-size: 1.8em;\n  cursor: pointer;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: #ffffffcf;\n}\n\n.taskdetails .complete-task {\n  background-color: #71c28b;\n}\n\n.taskdetails .delete-task {\n  background-color: #cf6a62fd;\n}\n\n.taskdetails .edit-task {\n  background-color: #9693bafd;\n}\n\n.notes-label {\n  margin-bottom: 5px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['html,\nbody {\n  height: 100%;\n  width: 100%;\n}\n\n/* * {border: 1px solid red} */\n\n#header {\n  text-align: center;\n  line-height: 15vh;\n  height: 15vh;\n  font-size: 25px;\n  font-weight: bold;\n  background-color: lightgrey;\n}\n\n#main {\n  width: 100vw;\n  height: 85vh;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  background-color: lightgrey;\n}\n\n#mainview {\n  width: 45%;\n  /* background-color: aliceblue; */\n  background-color: #f9f9f9;\n  border-radius: 5px;\n  height: 80vh;\n  overflow-y: auto;\n}\n\n#sidebar {\n  width: 20%;\n  border-radius: 5px;\n  margin: 10px;\n  /* background-color: aliceblue; */\n  background-color: #f9f9f9;\n  height: 60vh;\n}\n\n#current {\n  width: 20%;\n  border-radius: 5px;\n  margin: 10px;\n  /* background-color: aliceblue; */\n  background-color: #f9f9f9;\n  height: 80vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.task {\n  display: flex;\n  align-items: stretch;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  margin: 10px;\n  opacity: 0;\n  transition: opacity 0.8s ease-in-out;\n  border: 1px solid grey;\n  padding: 10px;\n}\n\n.priority {\n  width: 15px;\n  background-color: #ccc;\n}\n\n.priority-completed {\n  background-color: #979897a1;\n}\n\n.priority3 {\n  background-color: #f44336;\n}\n\n.priority2 {\n  background-color: #ff9800;\n}\n\n.priority1 {\n  background-color: #2196f3;\n}\n\n.task-content {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  padding: 10px;\n}\n\n.task-info {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.name {\n  font-weight: bold;\n}\n\n.due-date {\n  font-size: 0.9em;\n  color: #666;\n}\n\n.action-buttons {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.complete-task,\n.delete-task,\n.edit-task {\n  width: 30px;\n  height: 30px;\n  margin-left: 5px;\n  border: none;\n  color: #ffffffcf;\n  font-size: 1.2em;\n  cursor: pointer;\n}\n\n.complete-task {\n  background-color: #71c28b;\n}\n\n.delete-task {\n  background-color: #cf6a62fd;\n}\n\n.edit-task {\n  background-color: #9693bafd;\n}\n\n.task.fade-in {\n  opacity: 1;\n}\n\n.task.fade-out {\n  opacity: 0;\n}\n\n.notes {\n  min-height: 40px;\n  max-height: 60px;\n  overflow-y: auto;\n}\n\n#addtask {\n  aspect-ratio: 1;\n  position: fixed;\n  bottom: 20px;\n  left: 50%;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 50%;\n  font-size: 16px;\n  cursor: pointer;\n  z-index: 9999;\n}\n\n#formContainer {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #f9f9f9;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  z-index: 9999;\n  max-width: 400px;\n  width: 100%;\n}\n\n#formContainer.hidden {\n  display: none;\n}\n\n#taskForm {\n  display: flex;\n  flex-direction: column;\n}\n\n.form-row {\n  display: flex;\n  justify-content: space-between;\n}\n\n.form-group {\n  margin-bottom: 12px;\n}\n\n.form-row .form-group {\n  width: 48%;\n}\n\nlabel {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 4px;\n  font-size: 0.9rem;\n}\n\ninput[type="text"],\ninput[type="date"],\nselect,\ntextarea {\n  width: 100%;\n  padding: 6px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 0.9rem;\n}\n\nselect[multiple] {\n  height: 80px;\n}\n\ntextarea {\n  resize: vertical;\n  min-height: 60px;\n}\n\n.form-actions {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 12px;\n}\n\n#saveButton,\n#cancelButton {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n#saveButton {\n  background-color: #71c28b;\n  color: #fff;\n  margin-right: 8px;\n}\n\n#cancelButton {\n  background-color: #cf6a62fd;\n  color: #fff;\n}\n\n#saveButton:hover {\n  background-color: #45a049;\n}\n\n#cancelButton:hover {\n  background-color: #d32f2f;\n}\n\n#taskGroups {\n  height: 100px;\n  overflow-y: scroll;\n}\n\n.taskgroup {\n  margin: 5px;\n}\n\n.taskgroup.selected {\n  background-color: #a3a0a076;\n}\n\n.taskgroup:hover {\n  background-color: #e0e0e0;\n}\n\n#addtaskgroup {\n  aspect-ratio: 1;\n  position: fixed;\n  bottom: 20px;\n  left: 11.5%;\n  padding: 10px 20px;\n  background-color: #13ac43;\n  color: #fff;\n  border: none;\n  border-radius: 50%;\n  font-size: 16px;\n  cursor: pointer;\n  z-index: 9999;\n}\n\n#taskGroupFormContainer {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  z-index: 9999;\n}\n\n#taskGroupFormContainer.hidden {\n  display: none;\n}\n\n.context-menu {\n  display: none;\n  position: absolute;\n  background-color: #f9f9f9;\n  border: 1px solid #ccc;\n  padding: 5px;\n  z-index: 9999;\n}\n\n.context-menu-item {\n  cursor: pointer;\n  padding: 5px;\n}\n\n.context-menu-item:hover {\n  background-color: #e0e0e0;\n}\n\n.taskdetails {\n  opacity: 1;\n  transition: opacity 0.5s ease-in-out;\n  width: 90%;\n  height: 90%;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.taskdetails.fade-out {\n  opacity: 0;\n}\n\n.taskdetails .priority {\n  width: 100%;\n  height: 20px;\n  margin-bottom: 20px;\n  border-radius: 4px;\n}\n\n.taskdetails .name {\n  font-size: 1.8em;\n  font-weight: bold;\n  margin-bottom: 15px;\n}\n\n.taskdetails .due-date {\n  font-size: 1.2em;\n  color: #666;\n  margin-bottom: 15px;\n}\n\n.taskdetails .notes {\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n}\n\n.taskdetails .action-buttons {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.taskdetails .action-buttons button {\n  width: 45px;\n  height: 45px;\n  margin-left: 7.5px;\n  border: none;\n  font-size: 1.8em;\n  cursor: pointer;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: #ffffffcf;\n}\n\n.taskdetails .complete-task {\n  background-color: #71c28b;\n}\n\n.taskdetails .delete-task {\n  background-color: #cf6a62fd;\n}\n\n.taskdetails .edit-task {\n  background-color: #9693bafd;\n}\n\n.notes-label {\n  margin-bottom: 5px;\n}\n'],sourceRoot:""}]);const s=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var u=[].concat(e[d]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],d=r.base?c[0]+r.base:c[0],u=o[d]||0,l="".concat(d," ").concat(u);o[d]=u+1;var A=n(l),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(m);else{var f=a(m,r);r.byIndex=s,t.splice(s,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=n(o[i]);t[s].references--}for(var c=r(e,a),d=0;d<o.length;d++){var u=n(o[d]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=c}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},515:(e,t,n)=>{var r=n(72),a=n.n(r),o=n(825),i=n.n(o),s=n(659),c=n.n(s),d=n(56),u=n.n(d),l=n(540),A=n.n(l),m=n(113),f=n.n(m),p=n(208),h={};h.styleTagTransform=f(),h.setAttributes=u(),h.insert=c().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=A(),a()(p.A,h),p.A&&p.A.locals&&p.A.locals;const g={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function y(e){return(t={})=>{const n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const w={date:y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},b={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function E(e){return(t,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&e.formattingValues){const t=e.defaultFormattingWidth||e.defaultWidth,a=n?.width?String(n.width):t;r=e.formattingValues[a]||e.formattingValues[t]}else{const t=e.defaultWidth,a=n?.width?String(n.width):e.defaultWidth;r=e.values[a]||e.values[t]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const x={ordinalNumber:(e,t)=>{const n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:E({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:E({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:e=>e-1}),month:E({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:E({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:E({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function k(e){return(t,n={})=>{const r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;const i=o[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?function(e,t){for(let t=0;t<e.length;t++)if(e[t].test(i))return t}(s):function(e,t){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&e[t].test(i))return t}(s);let d;return d=e.valueCallback?e.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:t.slice(i.length)}}}const C={ordinalNumber:(B={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:e=>parseInt(e,10)},(e,t={})=>{const n=e.match(B.matchPattern);if(!n)return null;const r=n[0],a=e.match(B.parsePattern);if(!a)return null;let o=B.valueCallback?B.valueCallback(a[0]):a[0];return o=t.valueCallback?t.valueCallback(o):o,{value:o,rest:e.slice(r.length)}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:e=>e+1}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var B;const v={code:"en-US",formatDistance:(e,t,n)=>{let r;const a=g[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:w,formatRelative:(e,t,n,r)=>b[e],localize:x,match:C,options:{weekStartsOn:0,firstWeekContainsDate:1}};let T={};function D(){return T}Math.pow(10,8);const M=6048e5,L=864e5;function S(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function Y(e){const t=S(e);return t.setHours(0,0,0,0),t}function q(e){const t=S(e),n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),+e-+n}function I(e,t){return e instanceof Date?new e.constructor(t):new Date(t)}function W(e){const t=S(e);return function(e,t){const n=Y(e),r=Y(t),a=+n-q(n),o=+r-q(r);return Math.round((a-o)/L)}(t,function(e){const t=S(e),n=I(e,0);return n.setFullYear(t.getFullYear(),0,1),n.setHours(0,0,0,0),n}(t))+1}function N(e,t){const n=D(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,a=S(e),o=a.getDay(),i=(o<r?7:0)+o-r;return a.setDate(a.getDate()-i),a.setHours(0,0,0,0),a}function P(e){return N(e,{weekStartsOn:1})}function H(e){const t=S(e),n=t.getFullYear(),r=I(e,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const a=P(r),o=I(e,0);o.setFullYear(n,0,4),o.setHours(0,0,0,0);const i=P(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function G(e){const t=S(e),n=+P(t)-+function(e){const t=H(e),n=I(e,0);return n.setFullYear(t,0,4),n.setHours(0,0,0,0),P(n)}(t);return Math.round(n/M)+1}function z(e,t){const n=S(e),r=n.getFullYear(),a=D(),o=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,i=I(e,0);i.setFullYear(r+1,0,o),i.setHours(0,0,0,0);const s=N(i,t),c=I(e,0);c.setFullYear(r,0,o),c.setHours(0,0,0,0);const d=N(c,t);return n.getTime()>=s.getTime()?r+1:n.getTime()>=d.getTime()?r:r-1}function F(e,t){const n=S(e),r=+N(n,t)-+function(e,t){const n=D(),r=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,a=z(e,t),o=I(e,0);return o.setFullYear(a,0,r),o.setHours(0,0,0,0),N(o,t)}(n,t);return Math.round(r/M)+1}function j(e,t){return(e<0?"-":"")+Math.abs(e).toString().padStart(t,"0")}const O={y(e,t){const n=e.getFullYear(),r=n>0?n:1-n;return j("yy"===t?r%100:r,t.length)},M(e,t){const n=e.getMonth();return"M"===t?String(n+1):j(n+1,2)},d:(e,t)=>j(e.getDate(),t.length),a(e,t){const n=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(e,t)=>j(e.getHours()%12||12,t.length),H:(e,t)=>j(e.getHours(),t.length),m:(e,t)=>j(e.getMinutes(),t.length),s:(e,t)=>j(e.getSeconds(),t.length),S(e,t){const n=t.length,r=e.getMilliseconds();return j(Math.trunc(r*Math.pow(10,n-3)),t.length)}},Q={G:function(e,t,n){const r=e.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){const t=e.getFullYear(),r=t>0?t:1-t;return n.ordinalNumber(r,{unit:"year"})}return O.y(e,t)},Y:function(e,t,n,r){const a=z(e,r),o=a>0?a:1-a;return"YY"===t?j(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):j(o,t.length)},R:function(e,t){return j(H(e),t.length)},u:function(e,t){return j(e.getFullYear(),t.length)},Q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return j(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return j(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){const r=e.getMonth();switch(t){case"M":case"MM":return O.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){const r=e.getMonth();switch(t){case"L":return String(r+1);case"LL":return j(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){const a=F(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):j(a,t.length)},I:function(e,t,n){const r=G(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):j(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getDate(),{unit:"date"}):O.d(e,t)},D:function(e,t,n){const r=W(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):j(r,t.length)},E:function(e,t,n){const r=e.getDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){const a=e.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return j(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){const a=e.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return j(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){const r=e.getDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return j(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){const r=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){const r=e.getHours();let a;switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){const r=e.getHours();let a;switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){let t=e.getHours()%12;return 0===t&&(t=12),n.ordinalNumber(t,{unit:"hour"})}return O.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getHours(),{unit:"hour"}):O.H(e,t)},K:function(e,t,n){const r=e.getHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},k:function(e,t,n){let r=e.getHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getMinutes(),{unit:"minute"}):O.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getSeconds(),{unit:"second"}):O.s(e,t)},S:function(e,t){return O.S(e,t)},X:function(e,t,n){const r=e.getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return R(r);case"XXXX":case"XX":return Z(r);default:return Z(r,":")}},x:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"x":return R(r);case"xxxx":case"xx":return Z(r);default:return Z(r,":")}},O:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+X(r,":");default:return"GMT"+Z(r,":")}},z:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+X(r,":");default:return"GMT"+Z(r,":")}},t:function(e,t,n){return j(Math.trunc(e.getTime()/1e3),t.length)},T:function(e,t,n){return j(e.getTime(),t.length)}};function X(e,t=""){const n=e>0?"-":"+",r=Math.abs(e),a=Math.trunc(r/60),o=r%60;return 0===o?n+String(a):n+String(a)+t+j(o,2)}function R(e,t){return e%60==0?(e>0?"-":"+")+j(Math.abs(e)/60,2):Z(e,t)}function Z(e,t=""){const n=e>0?"-":"+",r=Math.abs(e);return n+j(Math.trunc(r/60),2)+t+j(r%60,2)}const U=(e,t)=>{switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},$=(e,t)=>{switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},J={p:$,P:(e,t)=>{const n=e.match(/(P+)(p+)?/)||[],r=n[1],a=n[2];if(!a)return U(e,t);let o;switch(r){case"P":o=t.dateTime({width:"short"});break;case"PP":o=t.dateTime({width:"medium"});break;case"PPP":o=t.dateTime({width:"long"});break;default:o=t.dateTime({width:"full"})}return o.replace("{{date}}",U(r,t)).replace("{{time}}",$(a,t))}},V=/^D+$/,K=/^Y+$/,_=["D","DD","YY","YYYY"];function ee(e){return V.test(e)}function te(e){return K.test(e)}function ne(e,t,n){const r=function(e,t,n){const r="Y"===e[0]?"years":"days of the month";return`Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(e,t,n);if(console.warn(r),_.includes(e))throw new RangeError(r)}function re(e){if(!(t=e,t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)||"number"==typeof e))return!1;var t;const n=S(e);return!isNaN(Number(n))}const ae=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,oe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ie=/^'([^]*?)'?$/,se=/''/g,ce=/[a-zA-Z]/;function de(e,t,n){const r=D(),a=n?.locale??r.locale??v,o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=S(e);if(!re(s))throw new RangeError("Invalid time value");let c=t.match(oe).map((e=>{const t=e[0];return"p"===t||"P"===t?(0,J[t])(e,a.formatLong):e})).join("").match(ae).map((e=>{if("''"===e)return{isToken:!1,value:"'"};const t=e[0];if("'"===t)return{isToken:!1,value:ue(e)};if(Q[t])return{isToken:!0,value:e};if(t.match(ce))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:e}}));a.localize.preprocessor&&(c=a.localize.preprocessor(s,c));const d={firstWeekContainsDate:o,weekStartsOn:i,locale:a};return c.map((r=>{if(!r.isToken)return r.value;const o=r.value;return(!n?.useAdditionalWeekYearTokens&&te(o)||!n?.useAdditionalDayOfYearTokens&&ee(o))&&ne(o,t,String(e)),(0,Q[o[0]])(s,o,a.localize,d)})).join("")}function ue(e){const t=e.match(ie);return t?t[1].replace(se,"'"):e}class le{subPriority=0;validate(e,t){return!0}}class Ae extends le{constructor(e,t,n,r,a){super(),this.value=e,this.validateValue=t,this.setValue=n,this.priority=r,a&&(this.subPriority=a)}validate(e,t){return this.validateValue(e,this.value,t)}set(e,t,n){return this.setValue(e,t,this.value,n)}}class me extends le{priority=10;subPriority=-1;set(e,t){return t.timestampIsSet?e:I(e,function(e,t){const n=t instanceof Date?I(t,0):new t(0);return n.setFullYear(e.getFullYear(),e.getMonth(),e.getDate()),n.setHours(e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()),n}(e,Date))}}class fe{run(e,t,n,r){const a=this.parse(e,t,n,r);return a?{setter:new Ae(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}validate(e,t,n){return!0}}const pe=/^(1[0-2]|0?\d)/,he=/^(3[0-1]|[0-2]?\d)/,ge=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,ye=/^(5[0-3]|[0-4]?\d)/,we=/^(2[0-3]|[0-1]?\d)/,be=/^(2[0-4]|[0-1]?\d)/,Ee=/^(1[0-1]|0?\d)/,xe=/^(1[0-2]|0?\d)/,ke=/^[0-5]?\d/,Ce=/^[0-5]?\d/,Be=/^\d/,ve=/^\d{1,2}/,Te=/^\d{1,3}/,De=/^\d{1,4}/,Me=/^-?\d+/,Le=/^-?\d/,Se=/^-?\d{1,2}/,Ye=/^-?\d{1,3}/,qe=/^-?\d{1,4}/,Ie=/^([+-])(\d{2})(\d{2})?|Z/,We=/^([+-])(\d{2})(\d{2})|Z/,Ne=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Pe=/^([+-])(\d{2}):(\d{2})|Z/,He=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function Ge(e,t){return e?{value:t(e.value),rest:e.rest}:e}function ze(e,t){const n=t.match(e);return n?{value:parseInt(n[0],10),rest:t.slice(n[0].length)}:null}function Fe(e,t){const n=t.match(e);return n?"Z"===n[0]?{value:0,rest:t.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:t.slice(n[0].length)}:null}function je(e){return ze(Me,e)}function Oe(e,t){switch(e){case 1:return ze(Be,t);case 2:return ze(ve,t);case 3:return ze(Te,t);case 4:return ze(De,t);default:return ze(new RegExp("^\\d{1,"+e+"}"),t)}}function Qe(e,t){switch(e){case 1:return ze(Le,t);case 2:return ze(Se,t);case 3:return ze(Ye,t);case 4:return ze(qe,t);default:return ze(new RegExp("^-?\\d{1,"+e+"}"),t)}}function Xe(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function Re(e,t){const n=t>0,r=n?t:1-t;let a;if(r<=50)a=e||100;else{const t=r+50;a=e+100*Math.trunc(t/100)-(e>=t%100?100:0)}return n?a:1-a}function Ze(e){return e%400==0||e%4==0&&e%100!=0}const Ue=[31,28,31,30,31,30,31,31,30,31,30,31],$e=[31,29,31,30,31,30,31,31,30,31,30,31];function Je(e,t){const n=S(e);return isNaN(t)?I(e,NaN):t?(n.setDate(n.getDate()+t),n):n}function Ve(e,t,n){const r=D(),a=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,o=S(e),i=o.getDay(),s=7-a;return Je(o,t<0||t>6?t-(i+s)%7:((t%7+7)%7+s)%7-(i+s)%7)}function Ke(e,t){const n=S(e);return Je(n,t-function(e){let t=S(e).getDay();return 0===t&&(t=7),t}(n))}const _e={G:new class extends fe{priority=140;parse(e,t,n){switch(t){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"});case"GGGGG":return n.era(e,{width:"narrow"});default:return n.era(e,{width:"wide"})||n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"})}}set(e,t,n){return t.era=n,e.setFullYear(n,0,1),e.setHours(0,0,0,0),e}incompatibleTokens=["R","u","t","T"]},y:new class extends fe{priority=130;incompatibleTokens=["Y","R","u","w","I","i","e","c","t","T"];parse(e,t,n){const r=e=>({year:e,isTwoDigitYear:"yy"===t});switch(t){case"y":return Ge(Oe(4,e),r);case"yo":return Ge(n.ordinalNumber(e,{unit:"year"}),r);default:return Ge(Oe(t.length,e),r)}}validate(e,t){return t.isTwoDigitYear||t.year>0}set(e,t,n){const r=e.getFullYear();if(n.isTwoDigitYear){const t=Re(n.year,r);return e.setFullYear(t,0,1),e.setHours(0,0,0,0),e}const a="era"in t&&1!==t.era?1-n.year:n.year;return e.setFullYear(a,0,1),e.setHours(0,0,0,0),e}},Y:new class extends fe{priority=130;parse(e,t,n){const r=e=>({year:e,isTwoDigitYear:"YY"===t});switch(t){case"Y":return Ge(Oe(4,e),r);case"Yo":return Ge(n.ordinalNumber(e,{unit:"year"}),r);default:return Ge(Oe(t.length,e),r)}}validate(e,t){return t.isTwoDigitYear||t.year>0}set(e,t,n,r){const a=z(e,r);if(n.isTwoDigitYear){const t=Re(n.year,a);return e.setFullYear(t,0,r.firstWeekContainsDate),e.setHours(0,0,0,0),N(e,r)}const o="era"in t&&1!==t.era?1-n.year:n.year;return e.setFullYear(o,0,r.firstWeekContainsDate),e.setHours(0,0,0,0),N(e,r)}incompatibleTokens=["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:new class extends fe{priority=130;parse(e,t){return Qe("R"===t?4:t.length,e)}set(e,t,n){const r=I(e,0);return r.setFullYear(n,0,4),r.setHours(0,0,0,0),P(r)}incompatibleTokens=["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:new class extends fe{priority=130;parse(e,t){return Qe("u"===t?4:t.length,e)}set(e,t,n){return e.setFullYear(n,0,1),e.setHours(0,0,0,0),e}incompatibleTokens=["G","y","Y","R","w","I","i","e","c","t","T"]},Q:new class extends fe{priority=120;parse(e,t,n){switch(t){case"Q":case"QQ":return Oe(t.length,e);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});default:return n.quarter(e,{width:"wide",context:"formatting"})||n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"})}}validate(e,t){return t>=1&&t<=4}set(e,t,n){return e.setMonth(3*(n-1),1),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:new class extends fe{priority=120;parse(e,t,n){switch(t){case"q":case"qq":return Oe(t.length,e);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});default:return n.quarter(e,{width:"wide",context:"standalone"})||n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"})}}validate(e,t){return t>=1&&t<=4}set(e,t,n){return e.setMonth(3*(n-1),1),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:new class extends fe{incompatibleTokens=["Y","R","q","Q","L","w","I","D","i","e","c","t","T"];priority=110;parse(e,t,n){const r=e=>e-1;switch(t){case"M":return Ge(ze(pe,e),r);case"MM":return Ge(Oe(2,e),r);case"Mo":return Ge(n.ordinalNumber(e,{unit:"month"}),r);case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});default:return n.month(e,{width:"wide",context:"formatting"})||n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"})}}validate(e,t){return t>=0&&t<=11}set(e,t,n){return e.setMonth(n,1),e.setHours(0,0,0,0),e}},L:new class extends fe{priority=110;parse(e,t,n){const r=e=>e-1;switch(t){case"L":return Ge(ze(pe,e),r);case"LL":return Ge(Oe(2,e),r);case"Lo":return Ge(n.ordinalNumber(e,{unit:"month"}),r);case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});default:return n.month(e,{width:"wide",context:"standalone"})||n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"})}}validate(e,t){return t>=0&&t<=11}set(e,t,n){return e.setMonth(n,1),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:new class extends fe{priority=100;parse(e,t,n){switch(t){case"w":return ze(ye,e);case"wo":return n.ordinalNumber(e,{unit:"week"});default:return Oe(t.length,e)}}validate(e,t){return t>=1&&t<=53}set(e,t,n,r){return N(function(e,t,n){const r=S(e),a=F(r,n)-t;return r.setDate(r.getDate()-7*a),r}(e,n,r),r)}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:new class extends fe{priority=100;parse(e,t,n){switch(t){case"I":return ze(ye,e);case"Io":return n.ordinalNumber(e,{unit:"week"});default:return Oe(t.length,e)}}validate(e,t){return t>=1&&t<=53}set(e,t,n){return P(function(e,t){const n=S(e),r=G(n)-t;return n.setDate(n.getDate()-7*r),n}(e,n))}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:new class extends fe{priority=90;subPriority=1;parse(e,t,n){switch(t){case"d":return ze(he,e);case"do":return n.ordinalNumber(e,{unit:"date"});default:return Oe(t.length,e)}}validate(e,t){const n=Ze(e.getFullYear()),r=e.getMonth();return n?t>=1&&t<=$e[r]:t>=1&&t<=Ue[r]}set(e,t,n){return e.setDate(n),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:new class extends fe{priority=90;subpriority=1;parse(e,t,n){switch(t){case"D":case"DD":return ze(ge,e);case"Do":return n.ordinalNumber(e,{unit:"date"});default:return Oe(t.length,e)}}validate(e,t){return Ze(e.getFullYear())?t>=1&&t<=366:t>=1&&t<=365}set(e,t,n){return e.setMonth(0,n),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:new class extends fe{priority=90;parse(e,t,n){switch(t){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}}validate(e,t){return t>=0&&t<=6}set(e,t,n,r){return(e=Ve(e,n,r)).setHours(0,0,0,0),e}incompatibleTokens=["D","i","e","c","t","T"]},e:new class extends fe{priority=90;parse(e,t,n,r){const a=e=>{const t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"e":case"ee":return Ge(Oe(t.length,e),a);case"eo":return Ge(n.ordinalNumber(e,{unit:"day"}),a);case"eee":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeeee":return n.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}}validate(e,t){return t>=0&&t<=6}set(e,t,n,r){return(e=Ve(e,n,r)).setHours(0,0,0,0),e}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:new class extends fe{priority=90;parse(e,t,n,r){const a=e=>{const t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"c":case"cc":return Ge(Oe(t.length,e),a);case"co":return Ge(n.ordinalNumber(e,{unit:"day"}),a);case"ccc":return n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"ccccc":return n.day(e,{width:"narrow",context:"standalone"});case"cccccc":return n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});default:return n.day(e,{width:"wide",context:"standalone"})||n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"})}}validate(e,t){return t>=0&&t<=6}set(e,t,n,r){return(e=Ve(e,n,r)).setHours(0,0,0,0),e}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:new class extends fe{priority=90;parse(e,t,n){const r=e=>0===e?7:e;switch(t){case"i":case"ii":return Oe(t.length,e);case"io":return n.ordinalNumber(e,{unit:"day"});case"iii":return Ge(n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r);case"iiiii":return Ge(n.day(e,{width:"narrow",context:"formatting"}),r);case"iiiiii":return Ge(n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r);default:return Ge(n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r)}}validate(e,t){return t>=1&&t<=7}set(e,t,n){return(e=Ke(e,n)).setHours(0,0,0,0),e}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:new class extends fe{priority=80;parse(e,t,n){switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}set(e,t,n){return e.setHours(Xe(n),0,0,0),e}incompatibleTokens=["b","B","H","k","t","T"]},b:new class extends fe{priority=80;parse(e,t,n){switch(t){case"b":case"bb":case"bbb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}set(e,t,n){return e.setHours(Xe(n),0,0,0),e}incompatibleTokens=["a","B","H","k","t","T"]},B:new class extends fe{priority=80;parse(e,t,n){switch(t){case"B":case"BB":case"BBB":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}set(e,t,n){return e.setHours(Xe(n),0,0,0),e}incompatibleTokens=["a","b","t","T"]},h:new class extends fe{priority=70;parse(e,t,n){switch(t){case"h":return ze(xe,e);case"ho":return n.ordinalNumber(e,{unit:"hour"});default:return Oe(t.length,e)}}validate(e,t){return t>=1&&t<=12}set(e,t,n){const r=e.getHours()>=12;return r&&n<12?e.setHours(n+12,0,0,0):r||12!==n?e.setHours(n,0,0,0):e.setHours(0,0,0,0),e}incompatibleTokens=["H","K","k","t","T"]},H:new class extends fe{priority=70;parse(e,t,n){switch(t){case"H":return ze(we,e);case"Ho":return n.ordinalNumber(e,{unit:"hour"});default:return Oe(t.length,e)}}validate(e,t){return t>=0&&t<=23}set(e,t,n){return e.setHours(n,0,0,0),e}incompatibleTokens=["a","b","h","K","k","t","T"]},K:new class extends fe{priority=70;parse(e,t,n){switch(t){case"K":return ze(Ee,e);case"Ko":return n.ordinalNumber(e,{unit:"hour"});default:return Oe(t.length,e)}}validate(e,t){return t>=0&&t<=11}set(e,t,n){return e.getHours()>=12&&n<12?e.setHours(n+12,0,0,0):e.setHours(n,0,0,0),e}incompatibleTokens=["h","H","k","t","T"]},k:new class extends fe{priority=70;parse(e,t,n){switch(t){case"k":return ze(be,e);case"ko":return n.ordinalNumber(e,{unit:"hour"});default:return Oe(t.length,e)}}validate(e,t){return t>=1&&t<=24}set(e,t,n){const r=n<=24?n%24:n;return e.setHours(r,0,0,0),e}incompatibleTokens=["a","b","h","H","K","t","T"]},m:new class extends fe{priority=60;parse(e,t,n){switch(t){case"m":return ze(ke,e);case"mo":return n.ordinalNumber(e,{unit:"minute"});default:return Oe(t.length,e)}}validate(e,t){return t>=0&&t<=59}set(e,t,n){return e.setMinutes(n,0,0),e}incompatibleTokens=["t","T"]},s:new class extends fe{priority=50;parse(e,t,n){switch(t){case"s":return ze(Ce,e);case"so":return n.ordinalNumber(e,{unit:"second"});default:return Oe(t.length,e)}}validate(e,t){return t>=0&&t<=59}set(e,t,n){return e.setSeconds(n,0),e}incompatibleTokens=["t","T"]},S:new class extends fe{priority=30;parse(e,t){return Ge(Oe(t.length,e),(e=>Math.trunc(e*Math.pow(10,3-t.length))))}set(e,t,n){return e.setMilliseconds(n),e}incompatibleTokens=["t","T"]},X:new class extends fe{priority=10;parse(e,t){switch(t){case"X":return Fe(Ie,e);case"XX":return Fe(We,e);case"XXXX":return Fe(Ne,e);case"XXXXX":return Fe(He,e);default:return Fe(Pe,e)}}set(e,t,n){return t.timestampIsSet?e:I(e,e.getTime()-q(e)-n)}incompatibleTokens=["t","T","x"]},x:new class extends fe{priority=10;parse(e,t){switch(t){case"x":return Fe(Ie,e);case"xx":return Fe(We,e);case"xxxx":return Fe(Ne,e);case"xxxxx":return Fe(He,e);default:return Fe(Pe,e)}}set(e,t,n){return t.timestampIsSet?e:I(e,e.getTime()-q(e)-n)}incompatibleTokens=["t","T","X"]},t:new class extends fe{priority=40;parse(e){return je(e)}set(e,t,n){return[I(e,1e3*n),{timestampIsSet:!0}]}incompatibleTokens="*"},T:new class extends fe{priority=20;parse(e){return je(e)}set(e,t,n){return[I(e,n),{timestampIsSet:!0}]}incompatibleTokens="*"}},et=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,tt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,nt=/^'([^]*?)'?$/,rt=/''/g,at=/\S/,ot=/[a-zA-Z]/;function it(e,t,n,r){const a=Object.assign({},D()),o=r?.locale??a.locale??v,i=r?.firstWeekContainsDate??r?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,s=r?.weekStartsOn??r?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0;if(""===t)return""===e?S(n):I(n,NaN);const c={firstWeekContainsDate:i,weekStartsOn:s,locale:o},d=[new me],u=t.match(tt).map((e=>{const t=e[0];return t in J?(0,J[t])(e,o.formatLong):e})).join("").match(et),l=[];for(let a of u){!r?.useAdditionalWeekYearTokens&&te(a)&&ne(a,t,e),!r?.useAdditionalDayOfYearTokens&&ee(a)&&ne(a,t,e);const i=a[0],s=_e[i];if(s){const{incompatibleTokens:t}=s;if(Array.isArray(t)){const e=l.find((e=>t.includes(e.token)||e.token===i));if(e)throw new RangeError(`The format string mustn't contain \`${e.fullToken}\` and \`${a}\` at the same time`)}else if("*"===s.incompatibleTokens&&l.length>0)throw new RangeError(`The format string mustn't contain \`${a}\` and any other token at the same time`);l.push({token:i,fullToken:a});const r=s.run(e,a,o.match,c);if(!r)return I(n,NaN);d.push(r.setter),e=r.rest}else{if(i.match(ot))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");if("''"===a?a="'":"'"===i&&(a=a.match(nt)[1].replace(rt,"'")),0!==e.indexOf(a))return I(n,NaN);e=e.slice(a.length)}}if(e.length>0&&at.test(e))return I(n,NaN);const A=d.map((e=>e.priority)).sort(((e,t)=>t-e)).filter(((e,t,n)=>n.indexOf(e)===t)).map((e=>d.filter((t=>t.priority===e)).sort(((e,t)=>t.subPriority-e.subPriority)))).map((e=>e[0]));let m=S(n);if(isNaN(m.getTime()))return I(n,NaN);const f={};for(const e of A){if(!e.validate(m,c))return I(n,NaN);const t=e.set(m,f,c);Array.isArray(t)?(m=t[0],Object.assign(f,t[1])):m=t}return I(n,m)}function st(e,t){return+S(e)<+S(t)}function ct(e,t){return+Y(e)==+Y(t)}function dt(e,t){return Je(e,7*t)}function ut(e,t){const n=S(e);if(isNaN(t))return I(e,NaN);if(!t)return n;const r=n.getDate(),a=I(e,n.getTime());return a.setMonth(n.getMonth()+t+1,0),r>=a.getDate()?a:(n.setFullYear(a.getFullYear(),a.getMonth(),r),n)}function lt(e,t){return ut(e,12*t)}function At(e,t){return function(e,t){return I(e,+S(e)+t)}(e,-t)}function mt(e){return ct(e,function(e){return I(e,Date.now())}(e))}function ft(e){const t=document.getElementById("mainview"),n=Array.from(t.querySelectorAll(".task")),r=new Map;n.forEach(((e,t)=>{r.set(e.querySelector(".name").innerText,t)}));const a=e.map(((e,t)=>{const n=document.createElement("div");n.classList.add("task");const r=document.createElement("div");r.classList.add("priority"),e.completedDate?(r.classList.remove("priority1","priority2","priority3"),r.classList.add("priority-completed")):1===e.priority?r.classList.add("priority1"):2===e.priority?r.classList.add("priority2"):r.classList.add("priority3");const a=document.createElement("div");a.classList.add("task-content");const o=document.createElement("div");o.classList.add("task-info");const i=document.createElement("div");i.classList.add("name"),i.innerText=e.name;const s=document.createElement("div");s.classList.add("due-date"),s.innerText=e.dueDate?de(e.dueDate,"MMM dd yyyy"):"";const c=document.createElement("div");c.classList.add("action-buttons");const d=document.createElement("button");d.innerText="✔",d.classList.add("complete-task");const u=document.createElement("button");u.innerText="X",u.classList.add("delete-task");const l=document.createElement("button");return l.innerText="✎",l.classList.add("edit-task"),c.appendChild(l),o.appendChild(i),o.appendChild(s),c.appendChild(d),c.appendChild(u),a.appendChild(o),a.appendChild(c),n.appendChild(r),n.appendChild(a),n}));n.forEach(((t,n)=>{const r=t.querySelector("div:nth-child(2)").innerText,a=e.findIndex((e=>e.name===r));if(-1!==a){const e=a*t.offsetHeight;t.style.transform=`translateY(${e-n*t.offsetHeight}px)`,t.style.transition="transform 0.5s"}else t.style.opacity="0",t.style.transition="opacity 0.5s"})),setTimeout((()=>{t.replaceChildren(...a),a.forEach((e=>{e.classList.add("fade-in")}))}),500)}function pt(e){const t=document.getElementById("sidebar");t.innerHTML="";for(let n in e){const r=document.createElement("div");r.innerText=e[n],r.classList.add("taskgroup"),r.setAttribute("data-group",`${e[n]}`),t.appendChild(r)}}function ht(e){const t=document.getElementById("current"),n=document.createElement("div");n.classList.add("taskdetails"),setTimeout((()=>{t.replaceChildren(),n.classList.add("fade-out"),t.appendChild(n),setTimeout((()=>{n.classList.remove("fade-out")}),500);const r=document.createElement("div");r.classList.add("priority"),e.completedDate?r.classList.add("priority-completed"):1===e.priority?r.classList.add("priority1"):2===e.priority?r.classList.add("priority2"):r.classList.add("priority3");const a=document.createElement("div");a.innerText=e.name,a.classList.add("name");const o=document.createElement("div");o.innerText=e.dueDate?"Due: "+de(e.dueDate,"MMM dd yyyy"):"No due date",o.classList.add("due-date");const i=document.createElement("div");i.innerText="Notes:",i.classList.add("notes-label");const s=document.createElement("div");s.classList.add("notes-container");const c=document.createElement("div");c.innerText=e.notes,c.classList.add("notes"),s.appendChild(c);const d=document.createElement("div");d.innerText="Recurs: "+e.getRecurrenceText();const u=document.createElement("div");u.classList.add("action-buttons");const l=document.createElement("button");l.innerText="✔",l.classList.add("complete-task"),l.addEventListener("click",(function(){const e=event.target.closest(".taskdetails").querySelector(".name").textContent,t=new Date,n=yt.find((t=>t.name===e&&!t.completedDate));if(n){let e;if(n.completedDate=t,n.taskGroups=["Completed"],bt.saveToLocalStorage(n),n.recurrence){const t=n.createRecurringTask();if(t){const r=bt.createTask({...n,dueDate:t,completedDate:null,taskGroups:n.taskGroups.filter((e=>"Completed"!==e))});xt(r),e=r}}e||(e=n);const r=document.querySelector(".selected").textContent;ft(Ct(yt,r)),ht(e)}}));const A=document.createElement("button");A.innerText="X",A.classList.add("delete-task"),A.addEventListener("click",(function(){Bt(e.name);const n=document.querySelector(".selected").textContent;ft(Ct(yt,n)),t.innerHTML=""}));const m=document.createElement("button");m.innerText="✎",m.classList.add("edit-task"),m.addEventListener("click",(function(){document.getElementById("taskName").value=e.name,document.getElementById("dueDate").value=e.dueDate?de(e.dueDate,"yyyy-MM-dd"):"",document.getElementById("priority").value=e.priority,document.getElementById("recurrence").value=e.recurrence,document.getElementById("taskNotes").value=e.notes;const t=document.getElementById("taskGroups");t.innerHTML="",wt.forEach((function(n){if("Today"!==n&&"This Week"!==n&&"All"!==n&&"Completed"!==n){const r=document.createElement("option");r.value=n,r.textContent=n,r.selected=e.taskGroups.includes(n),t.appendChild(r)}})),formContainer.classList.remove("hidden"),taskForm.removeEventListener("submit",gt),taskForm.addEventListener("submit",(function t(n){n.preventDefault();const r=document.getElementById("taskName").value,a=document.getElementById("dueDate").value,o=["All",...Array.from(document.querySelectorAll("#taskGroups option:checked")).map((e=>e.value))],i=parseInt(document.getElementById("priority").value),s=document.getElementById("recurrence").value,c=document.getElementById("taskNotes").value;e.name=r,e.dueDate=a?Y(it(a,"yyyy-MM-dd",new Date)):null,e.taskGroups=o,e.priority=i,e.recurrence=s,e.notes=c,bt.saveToLocalStorage(e);const d=document.querySelector(".selected").textContent;ft(Ct(yt,d)),ht(e),taskForm.reset(),formContainer.classList.add("hidden"),taskForm.removeEventListener("submit",t),taskForm.addEventListener("submit",gt)}))})),u.appendChild(m),u.appendChild(l),u.appendChild(A),n.appendChild(r),n.appendChild(a),n.appendChild(o),n.appendChild(i),n.appendChild(s),n.appendChild(d),n.appendChild(u)}),500)}function gt(e){e.preventDefault();const t=document.getElementById("taskName").value,n=document.getElementById("dueDate").value,r=["All",...Array.from(document.querySelectorAll("#taskGroups option:checked")).map((e=>e.value))],a=parseInt(document.getElementById("priority").value),o=document.getElementById("recurrence").value,i=document.getElementById("taskNotes").value;if(!t)return void console.error("Task name is required.");xt(bt.createTask({name:t,dueDate:n?Y(it(n,"yyyy-MM-dd",new Date)):null,taskGroups:r,priority:a,recurrence:o,notes:i}));const s=document.querySelector(".selected").textContent;ft(Ct(yt,s)),taskForm.reset(),formContainer.classList.add("hidden")}const yt=[],wt=["Today","This Week","All","Completed"];class bt{constructor(e,t="",n=3,r=null,a="",o=[],i="",s=null){this.name=e,this.description=t,this.priority=n,this.dueDate=r?it(r,"yyyy-MM-dd",new Date):null,this.recurrence=a,o.includes("Completed")?this.taskGroups=[...new Set(o)]:this.taskGroups=["All",...new Set(o)],this.notes=i,this.completedDate=s?it(s,"yyyy-MM-dd",new Date):null}static createTask(e){const t=new bt(e.name,e.description||"",e.priority||3,e.dueDate||null,e.recurrence||"",e.taskGroups||[],e.notes||"",e.completedDate||null);return bt.saveToLocalStorage(t),t}static saveToLocalStorage(e){const t=e.name+e.dueDate,n={...e,dueDate:e.dueDate?de(e.dueDate,"yyyy-MM-dd"):null,completedDate:e.completedDate?de(e.completedDate,"yyyy-MM-dd"):null};localStorage.setItem(t,JSON.stringify(n))}static loadFromLocalStorage(){const e=[];for(let t=0;t<localStorage.length;t++){const n=localStorage.key(t),r=JSON.parse(localStorage.getItem(n));if(r.name){const t=new bt(r.name,r.description,r.priority,r.dueDate,r.recurrence,r.taskGroups,r.notes,r.completedDate);e.push(t)}}return e}getRecurrenceText(){return{"":"Never",daily:"Every Day",weekly:"Every Week",monthly:"Every Month",yearly:"Every Year",completionDay:"Day After Completion",completionWeek:"Week After Completion",completionMonth:"Month After Completion",completionYear:"Year After Completion"}[this.recurrence]||"None"}}function Et(e,t,n){switch(t){case"daily":return Je(e,1);case"weekly":return dt(e,1);case"monthly":return ut(e,1);case"yearly":return lt(e,1);case"completionDay":return Je(n||e,1);case"completionWeek":return dt(n||e,1);case"completionMonth":return ut(n||e,1);case"completionYear":return lt(n||e,1);default:return console.log(`Unknown recurrence type: ${t}`),null}}function xt(e){yt.push(e),yt.sort(((e,t)=>{const n=e.dueDate?e.dueDate.getTime():1/0,r=t.dueDate?t.dueDate.getTime():1/0;return n===1/0&&r===1/0?e.priority-t.priority:n===1/0?1:r===1/0?-1:n-r||e.priority-t.priority}))}function kt(){localStorage.setItem("taskGroups",JSON.stringify(wt))}function Ct(e,t){document.querySelectorAll(".taskgroup").forEach((e=>e.classList.remove("selected")));const n=document.querySelector(`.taskgroup[data-group="${t}"]`);return n&&n.classList.add("selected"),"Today"===t?e.filter((e=>mt(e.dueDate)&&!e.completedDate)):"This Week"===t?e.filter((e=>function(e){const t=new Date,n=At(Y(t),1),r=function(e,t){const n=D(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,a=S(e),o=a.getDay(),i=6+(o<r?-7:0)-(o-r);return a.setDate(a.getDate()+i),a.setHours(23,59,59,999),a}(t);return function(e,t){const n=S(e),r=S(t);return n.getTime()>r.getTime()}(e,n)&&st(e,function(e){const t=S(e);return t.setHours(23,59,59,999),t}(r))}(e.dueDate)&&!e.completedDate)):"All"===t?e.filter((e=>!e.completedDate)):e.filter((e=>e.taskGroups.includes(t)))}function Bt(e,t){const n=yt.findIndex((n=>n.name===e&&(n.dueDate?de(n.dueDate,"yyyy-MM-dd")===t:!t)));if(-1!==n){const e=yt.splice(n,1)[0],t=e.name+e.dueDate;localStorage.removeItem(t)}return yt}window.addEventListener("load",(function(){!function(){const e=localStorage.getItem("taskGroups");e&&(wt.length=0,wt.push(...JSON.parse(e)))}(),pt(wt),bt.loadFromLocalStorage().forEach((e=>xt(e))),function(e){const t=Y(new Date),n=["daily","weekly","monthly","yearly","completionDay","completionWeek","completionMonth","completionYear"];e.forEach((r=>{if(n.includes(r.recurrence)&&r.dueDate&&!r.completedDate){let n=r.dueDate,a=0,o=0;const i=365;for(;st(n,t)&&o<i&&(n=Et(n,r.recurrence,r.completedDate),n)&&!e.some((e=>e.name===r.name&&e.dueDate&&ct(e.dueDate,n)));){{const e=bt.createTask({...r,dueDate:de(n,"yyyy-MM-dd"),completedDate:null});if(!e){console.log(`Failed to create recurring task for: ${r.name}`);break}xt(e),a++}o++}}}))}(yt),ft(Ct(yt,"All")),document.querySelectorAll(".taskgroup").forEach((function(e){e.addEventListener("click",(function(){const t=document.querySelector(".clicked");t&&t.classList.remove("clicked"),ft(Ct(yt,e.innerText)),e.classList.add("clicked")})),"All"===e.innerText&&e.click()}))})),document.querySelectorAll(".taskgroup").forEach((function(e){e.addEventListener("click",(function(){const t=document.querySelector(".clicked");t&&t.classList.remove("clicked"),ft(Ct(yt,e.innerText)),e.classList.add("clicked")})),"All"===e.innerText&&e.click()})),document.getElementById("mainview").addEventListener("click",(function(e){if(e.target.closest(".task")){const t=e.target.closest(".task"),n=t.querySelector(".name").textContent,r=t.querySelector(".due-date").textContent,a=yt.find((e=>e.name===n&&(e.dueDate?de(e.dueDate,"MMM dd yyyy")===r:!r)));a&&ht(a)}}));const vt=document.getElementById("addtask");document.getElementById("cancelButton").addEventListener("click",(function(){Tt.classList.add("hidden")})),vt.addEventListener("click",(function(){document.getElementById("taskName").value="",document.getElementById("dueDate").value="",document.getElementById("priority").value="3",document.getElementById("recurrence").value="",document.getElementById("taskNotes").value="";const e=document.getElementById("taskGroups");e.innerHTML="",wt.forEach((function(t){if("Today"!==t&&"This Week"!==t&&"All"!==t&&"Completed"!==t){const n=document.createElement("option");n.value=t,n.textContent=t,e.appendChild(n)}})),Tt.classList.remove("hidden")}));const Tt=document.getElementById("formContainer"),Dt=document.getElementById("taskGroups");wt.forEach((function(e){if("All"!==e&&"Today"!==e&&"This Week"!==e&&"Completed"!==e){const t=document.createElement("option");t.value=e,t.textContent=e,Dt.appendChild(t)}}));const Mt=document.getElementById("taskForm"),Lt=document.getElementById("mainview");Lt.addEventListener("click",(function(e){if(e.target.matches(".complete-task")){const t=e.target.closest(".task").querySelector(".name").textContent,n=new Date,r=yt.find((e=>e.name===t&&!e.completedDate));if(r){r.completedDate=n;let e=r.taskGroups;if(r.taskGroups=["Completed"],bt.saveToLocalStorage(r),r.recurrence){const t=Et(r.dueDate,r.recurrence,n);if(t){const n=["Today","This Week","All","Completed"],a=e.filter((e=>!n.includes(e)));xt(bt.createTask({...r,dueDate:t,completedDate:null,taskGroups:["All",...a]}))}}const t=document.querySelector(".selected").textContent;ft(Ct(yt,t))}}})),Lt.addEventListener("click",(function(e){if(e.target.matches(".delete-task")){const t=e.target.closest(".task"),n=t.querySelector(".name").textContent,r=t.querySelector(".due-date").textContent;Bt(n,r?de(it(r,"MMM dd yyyy",new Date),"yyyy-MM-dd"):"");const a=document.querySelector(".selected").textContent;ft(Ct(yt,a))}}));const St=document.getElementById("addtaskgroup"),Yt=document.getElementById("taskGroupFormContainer"),qt=document.getElementById("cancelTaskGroupButton");St.addEventListener("click",(function(){Yt.classList.remove("hidden")})),qt.addEventListener("click",(function(){Yt.classList.add("hidden")}));const It=document.getElementById("taskGroupForm");It.addEventListener("submit",(function(e){e.preventDefault();var t;(t=document.getElementById("taskGroupName").value)&&!wt.includes(t)&&(wt.push(t),kt()),pt(wt),It.reset(),Yt.classList.add("hidden")}));const Wt=document.getElementById("sidebar"),Nt=document.createElement("div");function Pt(e){e.preventDefault();const t=document.getElementById("taskName").value,n=document.getElementById("dueDate").value,r=["All",...Array.from(document.querySelectorAll("#taskGroups option:checked")).map((e=>e.value))],a=parseInt(document.getElementById("priority").value),o=document.getElementById("recurrence").value,i=document.getElementById("taskNotes").value;if(!t)return void console.error("Task name is required.");xt(bt.createTask({name:t,dueDate:n||null,taskGroups:r,priority:a,recurrence:o,notes:i}));const s=document.querySelector(".selected").textContent;ft(Ct(yt,s)),Mt.reset(),Tt.classList.add("hidden")}Nt.classList.add("context-menu"),Nt.innerHTML='<div class="context-menu-item">Delete</div>',document.body.appendChild(Nt),document.addEventListener("click",(function(e){Nt.contains(e.target)||(Nt.style.display="none")})),Wt.addEventListener("contextmenu",(function(e){e.preventDefault();const t=e.target.closest(".taskgroup");if(t){const n=t.textContent;Nt.style.display="block",Nt.style.left=e.pageX+"px",Nt.style.top=e.pageY+"px",Nt.addEventListener("click",(function(e){if(e.target.classList.contains("context-menu-item")){const e=wt.indexOf(n);-1!==e&&(wt.splice(e,1),kt(),pt(wt)),Nt.style.display="none"}}))}})),Lt.addEventListener("click",(function(e){if(e.target.matches(".edit-task")){const t=e.target.closest(".task"),n=t.querySelector(".name").textContent,r=t.querySelector(".due-date").textContent,a=yt.find((e=>e.name===n&&(e.dueDate?de(e.dueDate,"MMM dd yyyy")===r:!r)));if(a){document.getElementById("taskName").value=a.name,document.getElementById("dueDate").value=a.dueDate?de(a.dueDate,"yyyy-MM-dd"):"",document.getElementById("priority").value=a.priority,document.getElementById("recurrence").value=a.recurrence,document.getElementById("taskNotes").value=a.notes;const o=document.getElementById("taskGroups");function i(e){e.preventDefault();const t=document.getElementById("taskName").value,r=document.getElementById("dueDate").value,o=Array.from(document.querySelectorAll("#taskGroups option:checked")).map((e=>e.value)),s=parseInt(document.getElementById("priority").value),c=document.getElementById("recurrence").value,d=document.getElementById("taskNotes").value;!function(e,t){const n=yt.find((n=>n.name===e&&n.priority===t.priority&&(n.completedDate?n.completedDate.getTime()===t.completedDate?.getTime():!t.completedDate)));if(n){t.dueDate&&(t.dueDate=Y(it(t.dueDate,"yyyy-MM-dd",new Date))),Object.assign(n,t),n.completedDate?n.taskGroups=["Completed"]:(n.taskGroups=n.taskGroups.filter((e=>"Completed"!==e)),n.taskGroups.includes("All")||n.taskGroups.unshift("All")),bt.saveToLocalStorage(n);const r=document.querySelector(".selected").textContent;ft(Ct(yt,r));const a=document.querySelector("#current .name")?.textContent;a===e&&ht(n)}}(n,{name:t,dueDate:r,taskGroups:o,priority:s,recurrence:c,notes:d,completedDate:a.completedDate}),Mt.reset(),Tt.classList.add("hidden"),Mt.removeEventListener("submit",i),Mt.addEventListener("submit",Pt)}o.innerHTML="",wt.forEach((function(e){if("Today"!==e&&"This Week"!==e&&"All"!==e&&"Completed"!==e){const t=document.createElement("option");t.value=e,t.textContent=e,t.selected=a.taskGroups.includes(e),o.appendChild(t)}})),Tt.classList.remove("hidden"),Mt.removeEventListener("submit",Pt),Mt.addEventListener("submit",i)}}})),Mt.addEventListener("submit",Pt)}},e=>{e(e.s=515)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,